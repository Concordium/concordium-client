name: Concordium client release

on:
  workflow_dispatch:
    inputs:
      service:
        type: choice
        description: Choose which workflow should be ran
        options:
          - client-macos
          - client-windows
          - client-linux
          - all

  push:
    tags:
     - '*.*.*-*-rc'

env:
  STACK_VERSION: '3.1.1'
  GHC_VERSION: '9.6.6'
  RUST_VERSION: '1.82'
  SERVICE: "${{ inputs.service }}"
  PROTOC_VERSION: '28.3'
  FLATBUFFERS_VERSION: '23.5.26'

permissions:
  id-token: write
  contents: write

jobs:
  validate-preconditions:
    runs-on: ubuntu-latest
    outputs:
      release_type: ${{ steps.versions_derivation.outputs.release_type }}
      base_version: ${{ steps.versions_derivation.outputs.base_version }}
      version: ${{ steps.versions_derivation.outputs.version }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Validate version
        id: versions_derivation
        run: |
          CARGO_VERSION=$(yq .version package.yaml)
          if [ -z "${{ env.SERVICE }}" ]; then
            IFS='-' read -r VERSION BUILD RELEASE_TYPE <<< "${{ github.ref_name }}"
            if [ ! "$VERSION" = "$CARGO_VERSION" ]; then
              echo "::error::${CARGO_VERSION} does not match ${VERSION}."
              exit 1
            fi
          else
            RELEASE_TYPE="${{ env.SERVICE }}"
            BUILD=$(git rev-parse --short HEAD)
          fi
          echo "::notice::RELEASE_TYPE=${RELEASE_TYPE}"
          echo "release_type=${RELEASE_TYPE}" >> "$GITHUB_OUTPUT"
          echo "version=${CARGO_VERSION}-${BUILD}" >> "$GITHUB_OUTPUT"
          echo "base_version=${CARGO_VERSION}" >> "$GITHUB_OUTPUT"

  client-linux:
    needs: [validate-preconditions]
    runs-on: ubuntu-latest
    environment: release
    if: contains(fromJSON('["rc", "all", "client-linux"]'), needs.validate-preconditions.outputs.release_type)
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Build Concordium Client Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          file: scripts/distributables/linux-distributable-concordium-client.Dockerfile
          tags: ${{ github.job }}:${{ github.run_id }}
          no-cache: true
          build-args: |
            GHC_VERSION=${{ env.GHC_VERSION }}
            RUST_VERSION=${{ env.RUST_VERSION }}
            STACK_VERSION=${{ env.STACK_VERSION }}
          labels: |
            stack_version=${{ env.STACK_VERSION }}
            rust_version=${{ env.RUST_VERSION }}
            ghc_version=${{ env.GHC_VERSION }}
          
      - name: Create container and Extract Artifact
        run: |
          id=$(docker create ${{ github.job }}:${{ github.run_id }})
          docker cp $id:/out/concordium-client ./concordium-client-linux

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: concordium-client-linux
          if-no-files-found: error
          path: ./concordium-client-linux

  client-macos:
    needs: [validate-preconditions]
    runs-on: ${{ matrix.runner }}
    environment: release
    if: contains(fromJSON('["rc", "all", "client-macos"]'), needs.validate-preconditions.outputs.release_type)
    strategy:
      matrix:
        include:
          - arch: intel
            runner: macos-latest-large
          - arch: arm
            runner: macos-latest-xlarge
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - uses: haskell-actions/setup@v2
        with:
          ghc-version: ${{ env.GHC_VERSION }}
          enable-stack: true
          stack-version: ${{ env.STACK_VERSION }}

      - name: Install flatbuffers
        run: |
          if [ "${{ matrix.arch }}" == "intel" ]; then
            wget https://github.com/google/flatbuffers/releases/download/v${{ env.FLATBUFFERS_VERSION }}/MacIntel.flatc.binary.zip -O flatc.binary.zip
          else
            wget https://github.com/google/flatbuffers/releases/download/v${{ env.FLATBUFFERS_VERSION }}/Mac.flatc.binary.zip -O flatc.binary.zip
          fi
          unzip flatc.binary.zip -d flatbuffers
          sudo mv flatbuffers/flatc /usr/local/bin/

      - name: Install protobuf
        run: |
          if [ "${{ matrix.arch }}" == "intel" ]; then
            curl -L -o protoc.zip https://github.com/protocolbuffers/protobuf/releases/download/v${{ env.PROTOC_VERSION }}/protoc-${{ env.PROTOC_VERSION }}-osx-x86_64.zip
          else
            curl -L -o protoc.zip https://github.com/protocolbuffers/protobuf/releases/download/v${{ env.PROTOC_VERSION }}/protoc-${{ env.PROTOC_VERSION }}-osx-aarch_64.zip
          fi
          unzip protoc.zip
          sudo mv bin/protoc /usr/local/bin/
          sudo mv include/* /usr/local/include/

      - name: Import Apple certificate and provisioning profile (MacOS only)
        env:
          # Base64 encoding of the p12 certificate for Apple code signing.
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPLE_BUILD_CERTIFICATE_BASE64 }}
          BUILD_INSTALLER_CERTIFICATE_BASE64: ${{ secrets.APPLE_BUILD_INSTALLER_CERTIFICATE_BASE64 }}
          # Password for the p12 certificate for Apple code signing.
          BUILD_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_BUILD_CERTIFICATE_PASSWORD }}
          BUILD_INSTALLER_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_BUILD_INSTALLER_CERTIFICATE_PASSWORD }}
          # Random string to use as the keychain password.
          KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/apple_build_certificate.p12
          INSTALLER_CERTIFICATE_PATH=$RUNNER_TEMP/apple_build_installer_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_INSTALLER_CERTIFICATE_BASE64" | base64 --decode -o $INSTALLER_CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$BUILD_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $INSTALLER_CERTIFICATE_PATH -P "$BUILD_INSTALLER_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Build
        working-directory: scripts/distributables/macOS-package
        env:
          # Apple code sign variables:
          APPLEIDPASS: ${{ secrets.APPLEIDPASS }}
          APPLEID: ${{ secrets.APPLEID }}
        run: |
          ./build.sh --build-sign "${{ needs.validate-preconditions.outputs.version }}"
          mv "./build/concordium-client-${{ needs.validate-preconditions.outputs.version }}.pkg" "./build/concordium-client-macos-${{ matrix.arch }}.pkg"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: concordium-client-macos-${{ matrix.arch }}
          if-no-files-found: error
          path: scripts/distributables/macOS-package/build/concordium-client-macos-${{ matrix.arch }}.pkg

  client-windows:
    needs: [validate-preconditions]
    runs-on: windows-latest
    environment: release
    if: contains(fromJSON('["rc", "all", "client-windows"]'), needs.validate-preconditions.outputs.release_type)
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          choco install yq jq -y
        shell: bash

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}-x86_64-pc-windows-gnu

      - uses: haskell-actions/setup@v2
        with:
          ghc-version: ${{ env.GHC_VERSION }}
          enable-stack: true
          stack-version: ${{ env.STACK_VERSION }}

      - name: Setup client folder
        run: |
          mkdir -p "C:/Program Files/client/include"
          Add-Content -Path $env:GITHUB_PATH -Value "C:/Program Files/client"

      - name: Install flatbuffers
        run: |
          curl -L -O https://github.com/google/flatbuffers/releases/download/v${{ env.FLATBUFFERS_VERSION }}/Windows.flatc.binary.zip
          unzip Windows.flatc.binary.zip
          mv flatc.exe "C:/Program Files/client/"

      - name: Install protobuf (protoc)
        run: |
          curl -L -O https://github.com/protocolbuffers/protobuf/releases/download/v${{ env.PROTOC_VERSION }}/protoc-${{ env.PROTOC_VERSION }}-win64.zip
          unzip protoc-${{ env.PROTOC_VERSION }}-win64.zip
          mv bin/protoc.exe "C:/Program Files/client/"
          mv include/* "C:/Program Files/client/include"

      - name: Build
        id: build
        run: |
          stack build --force-dirty
          echo "bin_dir=$(stack path --local-install-root)/bin" >> $env:GITHUB_OUTPUT

      - name: Install DigiCert Client tools (Windows only)
        id: digicert_client
        uses: digicert/ssm-code-signing@v1.0.0
        
      - name: Import Windows certificate (Windows only)
        id: windows_certificate
        env:
          # Base64 encoding of the pfx/p12 certificate for Windows code signing.
          SM_CLIENT_CERT_FILE_B64: ${{ secrets.WINDOWS_SM_CLIENT_CERT_FILE_B64 }}
        run: |
          $CERTIFICATE_PATH_BASE64="$env:RUNNER_TEMP\cert-b64.txt"
          $CERTIFICATE_PATH="$env:RUNNER_TEMP\cert.pfx"

          Set-Content -Path $CERTIFICATE_PATH_BASE64 -Value $env:SM_CLIENT_CERT_FILE_B64
          certutil -decode $CERTIFICATE_PATH_BASE64 $CERTIFICATE_PATH
          echo "CERTIFICATE_PATH=$CERTIFICATE_PATH" >> $env:GITHUB_OUTPUT

      - name: Sign
        working-directory: ${{steps.build.outputs.bin_dir}}
        env:
          # windows signing
          WINDOWS_PKCS11_CONFIG: ${{ steps.digicert_client.outputs.PKCS11_CONFIG }}
          WINDOWS_SM_KEYPAIR_ALIAS: ${{ secrets.WINDOWS_SM_KEYPAIR_ALIAS }}
          SM_HOST: ${{ secrets.WINDOWS_SM_HOST }}
          SM_API_KEY: ${{ secrets.WINDOWS_SM_API_KEY }}
          SM_CLIENT_CERT_FILE: ${{ steps.windows_certificate.outputs.CERTIFICATE_PATH }}
          SM_CLIENT_CERT_PASSWORD: ${{ secrets.WINDOWS_SM_CLIENT_CERT_PASSWORD }}
        run: |
           smctl sign --keypair-alias ${{ env.WINDOWS_SM_KEYPAIR_ALIAS }} --input concordium-client.exe --config-file ${{ env.WINDOWS_PKCS11_CONFIG }} --verbose --exit-non-zero-on-fail --failfast
           smctl sign --keypair-alias ${{ env.WINDOWS_SM_KEYPAIR_ALIAS }} --input concordium_base.dll --config-file ${{ env.WINDOWS_PKCS11_CONFIG }} --verbose --exit-non-zero-on-fail --failfast
           smctl sign --keypair-alias ${{ env.WINDOWS_SM_KEYPAIR_ALIAS }} --input sha_2.dll --config-file ${{ env.WINDOWS_PKCS11_CONFIG }} --verbose --exit-non-zero-on-fail --failfast
        shell: cmd

      - name: Zip the binaries
        shell: bash
        run: |
          mkdir -p out
          bin_dir=$(stack path --local-install-root)/bin
          echo "$bin_dir"
          (cd "$bin_dir" && powershell -Command "Compress-Archive -Path concordium-client.exe,concordium_base.dll,sha_2.dll -DestinationPath concordium-client.zip")
          mv -f "$bin_dir/concordium-client.zip" out/concordium-client-windows.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: concordium-client-windows
          if-no-files-found: error
          path: out/concordium-client-windows.zip

  publish-release:
    needs: [validate-preconditions, client-linux, client-macos, client-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List artifacts
        run: find artifacts -type f | sort

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: "Concordium Client ${{ needs.validate-preconditions.outputs.version }}"
          draft: true,
          files: |
            artifacts/concordium-client-linux/concordium-client-linux
            artifacts/concordium-client-macos-intel/concordium-client-macos-intel.pkg
            artifacts/concordium-client-macos-arm/concordium-client-macos-arm.pkg
            artifacts/concordium-client-windows/concordium-client-windows.zip
          body: |
            # Concordium Client ${{ needs.validate-preconditions.outputs.version }}
            
            ## Binaries
            
            - **Linux**: `concordium-client-linux`
            - **macOS Intel**: `concordium-client-macos-intel.pkg`
            - **macOS ARM**: `concordium-client-macos-arm.pkg`
            - **Windows**: `concordium-client-windows.zip`

